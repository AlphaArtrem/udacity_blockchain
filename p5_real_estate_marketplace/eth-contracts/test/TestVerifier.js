// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
// Test verification with incorrect proof

var Verifier = artifacts.require('Verifier');
const zokratesProof = require("../../zokrates/code/square/proof.json");

contract('Test Verifier', accounts => {
  const contractOwner = accounts[0];

  beforeEach(async() => {
      this.contract = await Verifier.new({from: contractOwner});
  });

  it("Verifies Correct Proof", async() => {
        assert.equal(await this.contract.verifyTx.call(...Object.values(zokratesProof.proof), zokratesProof.inputs), true, "Proof should have been vefified")
  });

  it("Does Not Verify Correct Proof", async() => {
        assert.equal(await this.contract.verifyTx.call(...Object.values(zokratesProof.proof), [zokratesProof.inputs[0]+1, zokratesProof.inputs[1]+1]), false, "Proof shouldn\'t be vefified");
  });
});